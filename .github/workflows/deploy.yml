name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials for private ECR
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR (Private)
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        id: build-image
        run: |
          REPOSITORY_URI=637423558639.dkr.ecr.ap-south-1.amazonaws.com/hello-world
          IMAGE_TAG=latest
          docker build -t $REPOSITORY_URI:$IMAGE_TAG .
          docker push $REPOSITORY_URI:$IMAGE_TAG

      - name: Configure AWS credentials for public ECR
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Change region to us-east-1 for public ECR login

      - name: Login to Amazon ECR Public
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/h6l4w7j4

      - name: Create task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-def.json
          container-name: hello-world
          image: 637423558639.dkr.ecr.ap-south-1.amazonaws.com/hello-world:latest

      - name: Register task definition
        id: register-task-def
        run: |
          TASK_DEFINITION=$(cat ecs-task-def.json)
          REGISTERED_TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json "$TASK_DEFINITION")
          echo "REGISTERED_TASK_DEFINITION=$REGISTERED_TASK_DEFINITION" >> $GITHUB_ENV
          
      - name: Extract task definition ARN
        id: extract-arn
        run: |
          TASK_DEFINITION_ARN=$(echo $REGISTERED_TASK_DEFINITION | jq -r '.taskDefinition.taskDefinitionArn')
          echo "TASK_DEFINITION_ARN=$TASK_DEFINITION_ARN" >> $GITHUB_ENV

      - name: Create or update ECS service
        run: |
          CLUSTER_NAME=hello-world-cluster
          SERVICE_NAME=hello-world-service
          TASK_DEFINITION_ARN=${{ env.TASK_DEFINITION_ARN }}

          if ! aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME | grep -q "serviceName"; then
            aws ecs create-service \
              --cluster $CLUSTER_NAME \
              --service-name $SERVICE_NAME \
              --task-definition $TASK_DEFINITION_ARN \
              --desired-count 1 \
              --launch-type "FARGATE" \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0123456789abcdef0],securityGroups=[sg-0123456789abcdef0],assignPublicIp=ENABLED}"
          else
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --task-definition $TASK_DEFINITION_ARN
          fi

      - name: Deploy to ECS
        id: deploy-ecs
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.TASK_DEFINITION_ARN }}
          service: hello-world-service
          cluster: hello-world-cluster
          wait-for-service-stability: true
